substitutions:
  # used internally
  device_name: "sckt-afzuigkap"
  # displayed in HA
  friendly_name: "Afzuigkap"
  # Higher value gives lower watt readout
  current_res: "0.00290"
  # Lower value gives lower voltage readout
  voltage_div: "940"
  # Max Power is 3450W for 16A and 2300W for 10A
  max_power: "2300"

esphome:
  name: "${device_name}"
  platform: ESP8266
  board: esp8285
  on_boot:
    then:
      - switch.turn_on: relay
      - output.turn_on: led

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_name}
    password: !secret wifi_pass

captive_portal:

web_server:
  port: 80

logger:

api:
  password: !secret api_pass
ota:
  password: !secret ota_pass

# Button configuration
binary_sensor:
  - platform: gpio
    id: button
    pin:
      number: GPIO13
      inverted: true
    on_press:
      then:
        - switch.toggle: relay

# Setup of LED's used in displaying Switch status
output:
  - platform: gpio
    pin: GPIO0
    inverted: true
    id: led

# Config for switch
switch:
  - platform: gpio
    pin: GPIO15
    restore_mode: RESTORE_DEFAULT_ON
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    id: relay
    name: "${friendly_name}"
    on_turn_on:
      - output.turn_on: led
    on_turn_off:
      - output.turn_off: led

# Status LED for connection
status_led:
  pin:
    number: GPIO2
    inverted: true

# Sensors for Voltage (V), Current (A), Power (W), Consumption (kWh)
sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO5
    cf1_pin: GPIO14
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    current:
      name: "${friendly_name} Current"
      unit_of_measurement: "A"
      accuracy_decimals: 3
    voltage:
      name: "${friendly_name} Voltage"
      unit_of_measurement: "V"
    power:
      name: "${friendly_name} Power"
      unit_of_measurement: "W"
      id: power
      on_value_range:
        - above: ${max_power}
          then:
            - output.turn_off: led
            - switch.turn_off: relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W
    change_mode_every: 4
    update_interval: 10s
    energy:
      name: "${friendly_name} Consumption"
      unit_of_measurement: "kWh"
      filters:
        - multiply: 0.001