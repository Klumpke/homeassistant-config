blueprint:
  name: "AWTRIX - Spotify Now Playing"
  description: "This blueprint will show the song currently playing on spotify, with help of the Spotify HA integration"
  source_url: https://github.com/klumpke/Homeassistant_Blueprints/blob/main/awtrix_spotify_nowplaying.yaml
  domain: automation
  author: "Jeroen Klompen"
  input:
    awtrix:
      name: Awtrix Display
      description: Select the Awtrix display
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX Light
          multiple: false
    awtrix_app_name:
      name: AWTRIX Application name
      description: This is the custom app name that will be added to AWTRIX, should be unique
      selector:
        text: {}
      default: spotify
    media_player:
      name: Spotify Media Player Entity
      description: Select your Spotify Media Player
      selector:
        entity:
          filter:
            - domain: media_player
          multiple: false
    icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show
      selector:
        text:
      default: "50252"
    push_icon:
      name: Push Icon
      description:
        "Please select the pushIcon setting for the icon\n\n  - `0`  Icon
        doesn't move\n\n  - `1`  Icon moves with text and will not appear again\n\n
        \ - `2` Icon moves with text but appears again when the text starts to scroll
        again\n"
      selector:
        select:
          options:
            - label: "Icon doesn't move (default)"
              value: "0"
            - label: "Icon moves with text and will not appear again"
              value: "1"
            - label: "Icon moves with text but appears again when the text starts to scroll again"
              value: "2"
          multiple: false
          custom_value: false
      default: "0"
    text_color:
      name: Text Color
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    show_rainbow:
      name: Rainbow Colors
      description: Should the notification be shown in Rainbow colors?
      selector:
        boolean:
      default: false
    duration:
      name: Duration (in seconds)
      description: Sets how long the app or notification should be displayed
      default: "10"
    repeat:
      name: Repeat
      description: Sets how many times the text should be scrolled through the matrix before the app/notifcation ends
      default: "4"

variables:
  device_id: !input awtrix
  awtrix: "{{ iif( device_attr(device_id, 'name_by_user') != none, device_attr(device_id,'name_by_user'), device_attr(device_id, 'name') ) }}"
  app: !input awtrix_app_name
  message_topic: "{{ awtrix ~ '/custom/' ~ app }}"
  icon: !input icon
  media_player: !input media_player
  text_color: !input text_color
  show_rainbow: !input show_rainbow
  text: "{% if is_state(media_player, 'idle') -%} False {%- else -%} {{ state_attr(media_player, 'media_artist')}} - {{state_attr(media_player, 'media_title') }} {%- endif %}"
  progress: "{% if is_state(media_player, 'idle') -%} False {%- else -%} {{ ( state_attr(media_player, 'media_position') / state_attr(media_player, 'media_duration') * 100 ) | round() }} {%- endif %}"
  push_icon: !input push_icon
  duration: !input duration
  repeat: !input repeat

trigger:
  - platform: state
    entity_id: !input media_player
    attribute: media_title
  - platform: state
    entity_id: !input media_player
action:
  if:
    - condition: state
      entity_id: !input media_player
      state: playing
    - condition: state
      entity_id: !input media_player
      attribute: media_content_type
      state: music
  then:
    - service: mqtt.publish
      data:
        qos: 0
        retain: false
        topic: "{{ message_topic }}"
        payload: |-
          {
            "text": "{{ text }}",
            "icon": "{{ icon }}",
            "pushIcon": {{ push_icon }},
            "color": {{ text_color }},
            "rainbow": {{ iif(show_rainbow, "true", "false") }},
            "progress": {{ progress }},
            "progressC": "18B04C",
            "duration": {{ duration }},
            "repeat": {{ repeat }}
          }
  else:
    - service: mqtt.publish
      data:
        qos: 0
        retain: false
        topic: "{{ message_topic }}"
        payload: |-
          {}
mode: queued