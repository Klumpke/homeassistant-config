---
#
# This handles the loading of my weather platforms.
#
# https://www.home-assistant.io/components/weather/
#
weather:

# DarkSky
# https://www.home-assistant.io/components/weather.darksky/
  - platform: darksky
    api_key: !secret darksky_api_key
    mode: daily

# # Air Visual
# # https://www.home-assistant.io/integrations/airvisual/
# airvisual:
#   api_key: !secret airvisual_api
#   geographies:
#     latitude: !secret zone_home_latitude
#     longitude: !secret zone_home_longitude

sensor:
  # DarkSky
  # https://www.home-assistant.io/integrations/darksky/
  - platform: darksky
    api_key: !secret darksky_api_key
    monitored_conditions:
      - summary
      - temperature
      - humidity
      - wind_speed
    language: nl

  # Buienrader
  # https://www.home-assistant.io/integrations/sensor.buienradar/
  - platform: buienradar
    monitored_conditions:
      - temperature
      - humidity
      - windspeed
      - precipitation
      - irradiance


  # Buienalarm Regenvoorspelling
  - platform: command_line
    command: python3 -c "import requests; import json; import random; dataRequest = requests.get('https://cdn-secure.buienalarm.nl/api/3.4/forecast.php?lat={{state_attr("zone.home", "latitude") | round(3)}}&lon={{state_attr("zone.home", "longitude") | round(3)}}&region=nl&unit=mm%2Fu&c='+str(random.randint(0,999999999999999)) ).text; dataRequest = dataRequest.replace('\r\n',' '); data = '{\"data\":'+dataRequest+'}';    print(data);"
    name: Neerslag_Buienalarm_Regen_Data
    json_attributes:
      - data
    value_template: 'last_changed: {{states.sensor.neerslag_buienalarm_regen_data.last_changed | default(now())}}'
    scan_interval: 240

  # Buienrader Regenvoorspelling
  - platform: command_line
    command: python3 -c "import requests; import json; import random; dataRequest = requests.get('https://gpsgadget.buienradar.nl/data/raintext?lat={{state_attr("zone.home", "latitude") | round(2)}}&lon={{state_attr("zone.home", "longitude") | round(2)}}&c='+str(random.randint(0,999999999999999)) ).text; dataRequest = dataRequest.replace('\r\n',' '); data = '{\"data\":\"'+dataRequest+'\"}';    print(data);"
    name: Neerslag_Buienradar_Regen_Data
    json_attributes:
      - data
    value_template: 'last_changed: {{states.sensor.neerslag_buienradar_regen_data.last_changed | default(now())}}'
    scan_interval: 240


  # Ambee pollen
  - platform: rest
    scan_interval: 3600
    resource: !secret ambee_resource
    name: "pollen"
    value_template: >
      {{ value_json.version}}
    headers:
      content-type: "application/json"
      x-api-key: !secret ambee_api
    json_attributes_path: "$.data[0]"
    json_attributes:
      - Count
      - Risk
      - Species
      - updatedAt

  - platform: template
    sensors:
      pollen_tree_risk:
        icon_template: "mdi:tree-outline"
        friendly_name: "Bomen"
        value_template: >-
          {% set state = state_attr('sensor.pollen', 'Risk')['tree_pollen'] %}
          {% if state == "Low" %}Weinig
          {% elif state == "Moderate"%}Middel
          {% elif state == "High"%}Hoog
          {% elif state == "Very High"%}zeer hoog
          {% else %}Onbekend{% endif %}
      pollen_weed_risk:
        icon_template: "mdi:nature"
        friendly_name: "Onkruid"
        value_template: >-
          {% set state = state_attr('sensor.pollen', 'Risk')['weed_pollen'] %}
          {% if state == "Low" %}Weinig
          {% elif state == "Moderate"%}Middel
          {% elif state == "High"%}Hoog
          {% elif state == "Very High"%}zeer hoog
          {% else %}Onbekend{% endif %}
      pollen_grass_risk:
        icon_template: "mdi:grass"
        friendly_name: "Gras"
        value_template: >-
          {% set state = state_attr('sensor.pollen', 'Risk')['grass_pollen'] %}
          {% if state == "Low" %}Weinig
          {% elif state == "Moderate"%}Middel
          {% elif state == "High"%}Hoog
          {% elif state == "Very High"%}zeer hoog
          {% else %}Onbekend{% endif %}
      pollen_tree_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Bomen"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Count')['tree_pollen'] }}"

      pollen_els_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Els"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Alder }}"

      pollen_berk_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Berk"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Birch }}"

      pollen_coniferen_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Coniferen"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Cypress }}"

      pollen_iep_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Iep"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Elm }}"

      pollen_hazelaar_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Hazelaar"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Hazel }}"

      pollen_eik_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Eik"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Oak }}"

      pollen_den_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Den"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Pine }}"

      pollen_plataan_count:
        icon_template: "mdi:nature"
        friendly_name: "Plataan"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Tree.Plane }}"

      pollen_populier_count:
        icon_template: "mdi:tree-outline"
        friendly_name: "Populier"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species')['Tree']['Poplar / Cottonwood'] }}"

      pollen_weed_count:
        icon_template: "mdi:grass"
        friendly_name: "Onkruid"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Count')['weed_pollen'] }}"

      pollen_grass_count:
        icon_template: "mdi:grass"
        friendly_name: "Gras"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Count')['grass_pollen'] }}"

      pollen_amaranten_count:
        icon_template: "mdi:grass"
        friendly_name: "Amaranten/Ganzenvoet"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Weed.Chenopod }}"

      pollen_bijvoet_count:
        icon_template: "mdi:grass"
        friendly_name: "Bijvoet"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Weed.Mugwort }}"

      pollen_brandnetel_count:
        icon_template: "mdi:grass"
        friendly_name: "Brandnetel"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Weed.Nettle }}"

      pollen_ambrosia_count:
        icon_template: "mdi:grass"
        friendly_name: "Ambrosia"
        unit_of_measurement: " /m³"
        value_template: "{{ state_attr('sensor.pollen', 'Species').Weed.Ragweed }}"

      pollen_last_updated:
        icon_template: "mdi:clock"
        friendly_name: "Laatste update"
        device_class: timestamp
        value_template: "{{ state_attr('sensor.pollen', 'updatedAt') }}"


  # Lichtsterkte
  - platform: template
    sensors:
      tpl_sunlightstrength:
        entity_id:
          - sun.sun
          - sensor.weatherbit_cloud_coverage
        value_template: >-
          {%- set elevation = state_attr('sun.sun','elevation') | float %}
          {%- set cloud_coverage = states('sensor.sensor.weatherbit_cloud_coverage') | float %}
          {%- set cloud_factor = (1 - (0.75 * ( cloud_coverage / 100) ** 3 )) %}
          {%- set min_elevation = -6 %}
          {%- set max_elevation = 90 %}
          {%- set adjusted_elevation = elevation - min_elevation %}
          {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
          {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
          {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
          {%- set adjusted_elevation = adjusted_elevation %}
          {%- set adjusted_elevation = adjusted_elevation * 100 %}
          {%- set brightness = adjusted_elevation * cloud_factor %}
          {{ brightness | round }}
        unit_of_measurement: '%'
        device_class: 'illuminance'